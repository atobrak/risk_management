{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### Risk management software implementation \n",
    "\n",
    "# script is written in an object oriented fashion\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "###### categories\n",
    "\n",
    "# Employment\n",
    "# income\n",
    "# Family dependencies\n",
    "# social activities\n",
    "# Age\n",
    "# Health situation\n",
    "# Ocupational hazard\n",
    "# Location\n",
    "# random\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### steps in the risk evaluation process\n",
    "\n",
    "# Evaluate loss exposures\n",
    "# Appraise risk management techniques\n",
    "# Establish risk management program\n",
    "# Adapt to change "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What is the client's job category: business consulting\n",
      "What is the client's job level: Advanced\n",
      "What is the client's job location: Zurich\n",
      "Is the client's job flexible (can they change job easily and/or work from home?): Yes\n",
      "What is the client's Tax location: Bern\n",
      "What is the client's gross annual income: 130000\n",
      "How old is the client: 30\n",
      "Do you ski often: No\n",
      "Do you go the gym: Yes\n",
      "Do you go hiking: No\n",
      "Client's family health history: None\n",
      "Client's health history: None\n",
      "What is the job risk level: Low\n",
      "How many number of people depend on this income: 2\n"
     ]
    }
   ],
   "source": [
    "# User supplied inputs\n",
    "\n",
    "Job_T = input(\"What is the client's job category: \")\n",
    "\n",
    "Job_L = input(\"What is the client's job level: \")\n",
    "\n",
    "Job_Loc = input (\"What is the client's job location: \")\n",
    "\n",
    "Job_Flex = input (\"Is the client's job flexible (can they change job easily and/or work from home?): \")\n",
    "\n",
    "Tax_Loc = input (\"What is the client's Tax location: \")\n",
    "\n",
    "GI = int(input (\"What is the client's gross annual income: \"))\n",
    "\n",
    "AGE = int(input (\"How old is the client: \"))\n",
    "\n",
    "Ski = input (\"Do you ski often: \")\n",
    "\n",
    "Gym = input (\"Do you go the gym: \")\n",
    "\n",
    "Hiking = input (\"Do you go hiking: \")\n",
    "\n",
    "FHC = input (\"Client's family health history: \")\n",
    "\n",
    "HC = input (\"Client's health history: \")\n",
    "\n",
    "JRL = input (\"What is the job risk level: \")\n",
    "\n",
    "FD = int(input (\"How many number of people depend on this income: \"))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gender of client : female\n",
      "Simulate for job loss after year : 10\n"
     ]
    }
   ],
   "source": [
    "gender = input(\"gender of client : \")\n",
    "\n",
    "\n",
    "YJL = int(input(\"Simulate for job loss after year : \"))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "if gender == 'Female' or gender == 'female':\n",
    "    RT_age = 60\n",
    "else:\n",
    "    RT = 65"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for policy 1\n",
    "\n",
    "Insurance_principal_1 = 500\n",
    "\n",
    "Insurance_monthly_payment_1 = 500\n",
    "    \n",
    "Insurance_payback_rate_1 = 0.15\n",
    "\n",
    "\n",
    "\n",
    "# for policy 2\n",
    "Insurance_principal_2 = 700\n",
    "\n",
    "Insurance_monthly_payment_2 = 500\n",
    "    \n",
    "Insurance_payback_rate_2 = 0.25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# defining classes for the main categories\n",
    "\n",
    "class Employment1:\n",
    "    \n",
    "    def __init__ (self, job_type, job_level, job_flexibility):\n",
    "        \n",
    "        self.job_type = job_type\n",
    "        \n",
    "        \n",
    "        self.job_level = job_level\n",
    "        \n",
    "        \n",
    "        self.job_flexibility = job_flexibility\n",
    "        \n",
    "        \n",
    "        job_type = Job_T\n",
    "        \n",
    "        job_level = Job_L\n",
    "        \n",
    "        job_flexibility = Job_Flex\n",
    "        \n",
    "        \n",
    "        ### Defining various risk situations to asses\n",
    "        \n",
    "        # risk according to job type\n",
    "        # risk according to job level\n",
    "        # risk according to job flexibility\n",
    "        \n",
    "        \n",
    "        \n",
    "        ### Risk according to job type\n",
    "        \n",
    "        ## industries considered secure (Financial services, Pharma, Engineering, IT, Business Consulting, Researcher)\n",
    "        \n",
    "    def Employment_Func(self):\n",
    "\n",
    "        ## Defining some useful variables for this use case\n",
    "\n",
    "        if self.job_type == 'Financial services' or self.job_type == 'financial services':\n",
    "\n",
    "            # Financial services\n",
    "            Pj0_f = 0.8 # good probability\n",
    "            Pl0_f = 0.2 # bad probability\n",
    "\n",
    "            Pj1_f = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_f = 1.0\n",
    "\n",
    "\n",
    "            Jr_f = -0.35 # good weight\n",
    "            Lr_f = 0.55 # bad weight\n",
    "\n",
    "            RE_T = (Jr_f * Pj0_f) + (Lr_f * Pl0_f)  # Risk expectation when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        elif self.job_type == 'Pharma' or self.job_type == 'pharma' :\n",
    "            # Pharma\n",
    "            Pj0_p = 0.85 # good probability\n",
    "            Pl0_p = 0.15 # bad probability\n",
    "\n",
    "            Pj1_p = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_p = 1.0\n",
    "\n",
    "\n",
    "            Jr_p = -0.35 # good weight\n",
    "            Lr_p = 0.55 # bad weight\n",
    "\n",
    "            RE_T = (Jr_p * Pj0_p) + (Lr_p * Pl0_p)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        elif self.job_type == 'Engineering' or self.job_type == 'engineering':\n",
    "            # Engineering\n",
    "            Pj0_e = 0.65 # good probability\n",
    "            Pl0_e = 0.35 # bad probability\n",
    "\n",
    "            Pj1_e = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_e = 1.0\n",
    "\n",
    "\n",
    "            Jr_e = -0.35 # good weight \n",
    "            Lr_e = 0.55 # bad weight\n",
    "\n",
    "            RE_T = (Jr_e * Pj0_e) + (Lr_e * Pl0_e)  # Risk expectattion when the client has a job.\n",
    "\n",
    "        elif self.job_type == 'IT' or self.job_type == 'it':\n",
    "            # IT\n",
    "            Pj0_i = 0.75 # good probability\n",
    "            Pl0_i = 0.25 # bad probability\n",
    "\n",
    "            Pj1_i = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_i = 1.0\n",
    "\n",
    "\n",
    "            Jr_i = -0.35 # good weight\n",
    "            Lr_i = 0.55 # bad weight\n",
    "\n",
    "            RE_T = (Jr_i * Pj0_i) + (Lr_i * Pl0_i)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        elif self.job_type == 'Business consulting' or self.job_type == 'business consulting':\n",
    "            # Business consulting\n",
    "            Pj0_b = 0.9 # good probability\n",
    "            Pl0_b = 0.1 # bad probability\n",
    "\n",
    "            Pj1_b = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_b = 1.0\n",
    "\n",
    "\n",
    "            Jr_b = -0.35 # good weight\n",
    "            Lr_b = 0.55 # bad weight\n",
    "\n",
    "            RE_T = (Jr_b * Pj0_b) + (Lr_b * Pl0_b)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        else:\n",
    "            # Researcher\n",
    "            Pj0_r = 0.7 # good probability\n",
    "            Pl0_r = 0.3 # bad probability\n",
    "\n",
    "            Pj1_r = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_r = 1.0\n",
    "\n",
    "\n",
    "            Jr_r = -0.35 # good weight \n",
    "            Lr_r = 0.55 # bad weight\n",
    "\n",
    "            RE_T = (Jr_r * Pj0_r) + (Lr_r * Pl0_r)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "            ### Risk according to job level\n",
    "\n",
    "            ## levels considered include (beginner, intermediate, management)\n",
    "\n",
    "\n",
    "        if self.job_level == 'Beginner' or self.job_level == 'beginner':\n",
    "\n",
    "            # Beginner\n",
    "            Pj0_B = 0.5 # good probability \n",
    "            Pl0_B = 0.5 # bad probability\n",
    "\n",
    "            Pj1_B = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_B = 1.0\n",
    "\n",
    "\n",
    "            Jr_B = -0.35 # good weight\n",
    "            Lr_B = 0.55 # bad weight\n",
    "\n",
    "            RE_L = (Jr_B * Pj0_B) + (Lr_B * Pl0_B)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        elif self.job_level == 'Intermediate' or self.job_level == 'intermediate':\n",
    "            # Intermediate\n",
    "            Pj0_I = 0.65 # good probability \n",
    "            Pl0_I = 0.35 # bad probability\n",
    "\n",
    "            Pj1_I = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_I = 1.0\n",
    "\n",
    "\n",
    "            Jr_I = -0.35 # good weight\n",
    "            Lr_I = 0.55 # bad weight\n",
    "\n",
    "            RE_L = (Jr_I * Pj0_I) + (Lr_I * Pl0_I)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        else:\n",
    "            # Advanced\n",
    "            Pj0_A = 0.85 # good probability \n",
    "            Pl0_A = 0.15 # bad probability\n",
    "\n",
    "            Pj1_A = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_A = 1.0\n",
    "\n",
    "\n",
    "            Jr_A = -0.35 # good weight\n",
    "            Lr_A = 0.55 # bad weight\n",
    "\n",
    "            RE_L = (Jr_A * Pj0_A) + (Lr_A * Pl0_A)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        if self.job_flexibility == 'Yes' or self.job_flexibility == 'yes':\n",
    "\n",
    "            # Job is flexibility\n",
    "            Pj0_Y = 0.85 # good probability\n",
    "            Pl0_Y = 0.15 # bad probability\n",
    "\n",
    "            Pj1_Y = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_Y = 1.0\n",
    "\n",
    "\n",
    "            Jr_Y = -0.35 # good weight\n",
    "            Lr_Y = 0.55 # bad weight\n",
    "\n",
    "            RE_F = (Jr_Y * Pj0_Y) + (Lr_Y * Pl0_Y)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        else:\n",
    "            # Job is not flexible\n",
    "            Pj0_N = 0.15 # good probability\n",
    "            Pl0_N = 0.85 # bad probability\n",
    "\n",
    "            Pj1_N = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_N = 1.0\n",
    "\n",
    "\n",
    "            Jr_N = -0.35 # good weight\n",
    "            Lr_N = 0.55 # bad weight\n",
    "\n",
    "            RE_F = (Jr_N * Pj0_N) + (Lr_N * Pl0_N)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        RE_P = RE_T + RE_L + RE_F\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        return RE_P   # returning the cummulative risk associated with the client's employment\n",
    "\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# defining classes for the main categories\n",
    "\n",
    "class Employment2:\n",
    "    \n",
    "    def __init__ (self, job_type, job_level, job_flexibility):\n",
    "        \n",
    "        self.job_type = job_type\n",
    "        \n",
    "        \n",
    "        self.job_level = job_level\n",
    "        \n",
    "        \n",
    "        self.job_flexibility = job_flexibility\n",
    "        \n",
    "        \n",
    "        job_type = Job_T\n",
    "        \n",
    "        job_level = Job_L\n",
    "        \n",
    "        job_flexibility = Job_Flex\n",
    "        \n",
    "        \n",
    "        ### Defining various risk situations to asses\n",
    "        \n",
    "        # risk according to job type\n",
    "        # risk according to job level\n",
    "        # risk according to job flexibility\n",
    "        \n",
    "        \n",
    "        \n",
    "        ### Risk according to job type\n",
    "        \n",
    "        ## industries considered secure (Financial services, Pharma, Engineering, IT, Business Consulting, Researcher)\n",
    "        \n",
    "    def Employment_Func(self):\n",
    "\n",
    "        ## Defining some useful variables for this use case\n",
    "\n",
    "        if self.job_type == 'Financial services' or self.job_type == 'financial services':\n",
    "\n",
    "            # Financial services\n",
    "            Pj0_f = 0.8 # good probability\n",
    "            Pl0_f = 0.2 # bad probability\n",
    "\n",
    "            Pj1_f = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_f = 1.0\n",
    "\n",
    "\n",
    "            Jr_f = -0.35 # good weight\n",
    "            Lr_f = 0.55 # bad weight\n",
    "\n",
    "            RE_T = (Jr_f * Pj1_f) + (Lr_f * Pl1_f)  # Risk expectation when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        elif self.job_type == 'Pharma' or self.job_type == 'pharma' :\n",
    "            # Pharma\n",
    "            Pj0_p = 0.85 # good probability\n",
    "            Pl0_p = 0.15 # bad probability\n",
    "\n",
    "            Pj1_p = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_p = 1.0\n",
    "\n",
    "\n",
    "            Jr_p = -0.35 # good weight\n",
    "            Lr_p = 0.55 # bad weight\n",
    "\n",
    "            RE_T = (Jr_p * Pj1_p) + (Lr_p * Pl1_p)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        elif self.job_type == 'Engineering' or self.job_type == 'engineering':\n",
    "            # Engineering\n",
    "            Pj0_e = 0.65 # good probability\n",
    "            Pl0_e = 0.35 # bad probability\n",
    "\n",
    "            Pj1_e = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_e = 1.0\n",
    "\n",
    "\n",
    "            Jr_e = -0.35 # good weight \n",
    "            Lr_e = 0.55 # bad weight\n",
    "\n",
    "            RE_T = (Jr_e * Pj1_e) + (Lr_e * Pl1_e)  # Risk expectattion when the client has a job.\n",
    "\n",
    "        elif self.job_type == 'IT' or self.job_type == 'it':\n",
    "            # IT\n",
    "            Pj0_i = 0.75 # good probability\n",
    "            Pl0_i = 0.25 # bad probability\n",
    "\n",
    "            Pj1_i = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_i = 1.0\n",
    "\n",
    "\n",
    "            Jr_i = -0.35 # good weight\n",
    "            Lr_i = 0.55 # bad weight\n",
    "\n",
    "            RE_T = (Jr_i * Pj1_i) + (Lr_i * Pl1_i)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        elif self.job_type == 'Business consulting' or self.job_type == 'business consulting':\n",
    "            # Business consulting\n",
    "            Pj0_b = 0.9 # good probability\n",
    "            Pl0_b = 0.1 # bad probability\n",
    "\n",
    "            Pj1_b = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_b = 1.0\n",
    "\n",
    "\n",
    "            Jr_b = -0.35 # good weight\n",
    "            Lr_b = 0.55 # bad weight\n",
    "\n",
    "            RE_T = (Jr_b * Pj1_b) + (Lr_b * Pl1_b)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        else:\n",
    "            # Researcher\n",
    "            Pj0_r = 0.7 # good probability\n",
    "            Pl0_r = 0.3 # bad probability\n",
    "\n",
    "            Pj1_r = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_r = 1.0\n",
    "\n",
    "\n",
    "            Jr_r = -0.35 # good weight \n",
    "            Lr_r = 0.55 # bad weight\n",
    "\n",
    "            RE_T = (Jr_r * Pj1_r) + (Lr_r * Pl1_r)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "            ### Risk according to job level\n",
    "\n",
    "            ## levels considered include (beginner, intermediate, management)\n",
    "\n",
    "\n",
    "        if self.job_level == 'Beginner' or self.job_level == 'beginner':\n",
    "\n",
    "            # Beginner\n",
    "            Pj0_B = 0.5 # good probability \n",
    "            Pl0_B = 0.5 # bad probability\n",
    "\n",
    "            Pj1_B = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_B = 1.0\n",
    "\n",
    "\n",
    "            Jr_B = -0.35 # good weight\n",
    "            Lr_B = 0.55 # bad weight\n",
    "\n",
    "            RE_L = (Jr_B * Pj1_B) + (Lr_B * Pl1_B)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        elif self.job_level == 'Intermediate' or self.job_level == 'intermediate':\n",
    "            # Intermediate\n",
    "            Pj0_I = 0.65 # good probability \n",
    "            Pl0_I = 0.35 # bad probability\n",
    "\n",
    "            Pj1_I = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_I = 1.0\n",
    "\n",
    "\n",
    "            Jr_I = -0.35 # good weight\n",
    "            Lr_I = 0.55 # bad weight\n",
    "\n",
    "            RE_L = (Jr_I * Pj1_I) + (Lr_I * Pl1_I)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        else:\n",
    "            # Advanced\n",
    "            Pj0_A = 0.85 # good probability \n",
    "            Pl0_A = 0.15 # bad probability\n",
    "\n",
    "            Pj1_A = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_A = 1.0\n",
    "\n",
    "\n",
    "            Jr_A = -0.35 # good weight\n",
    "            Lr_A = 0.55 # bad weight\n",
    "\n",
    "            RE_L = (Jr_A * Pj1_A) + (Lr_A * Pl1_A)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        if self.job_flexibility == 'Yes' or self.job_flexibility == 'yes':\n",
    "\n",
    "            # Job is flexibility\n",
    "            Pj0_Y = 0.85 # good probability\n",
    "            Pl0_Y = 0.15 # bad probability\n",
    "\n",
    "            Pj1_Y = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_Y = 1.0\n",
    "\n",
    "\n",
    "            Jr_Y = -0.35 # good weight\n",
    "            Lr_Y = 0.55 # bad weight\n",
    "\n",
    "            RE_F = (Jr_Y * Pj1_Y) + (Lr_Y * Pl1_Y)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        else:\n",
    "            # Job is not flexible\n",
    "            Pj0_N = 0.15 # good probability\n",
    "            Pl0_N = 0.85 # bad probability\n",
    "\n",
    "            Pj1_N = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_N = 1.0\n",
    "\n",
    "\n",
    "            Jr_N = -0.35 # good weight\n",
    "            Lr_N = 0.55 # bad weight\n",
    "\n",
    "            RE_F = (Jr_N * Pj0_N) + (Lr_N * Pl1_N)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        RE_P = RE_T + RE_L + RE_F\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        return RE_P   # returning the cummulative risk associated with the client's employment\n",
    "\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.69\n"
     ]
    }
   ],
   "source": [
    "# for case 1\n",
    "\n",
    "p1 = Employment1(Job_T, Job_L, Job_Flex).Employment_Func()\n",
    "print(p1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.6500000000000001\n"
     ]
    }
   ],
   "source": [
    "# for case 2\n",
    "\n",
    "p2 = Employment2(Job_T, Job_L, Job_Flex).Employment_Func()\n",
    "print(p2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Life_style:\n",
    "    def __init__ (self, ski, gym, hiking, family_dependency):\n",
    "        \n",
    "        self.ski = ski\n",
    "        self.gym = gym\n",
    "        self.hiking = hiking\n",
    "        self.family_dependency = family_dependency\n",
    "        \n",
    "    \n",
    "        \n",
    "        ski = Ski\n",
    "        gym = Gym\n",
    "        hiking = Hiking\n",
    "        family_dependency = FD\n",
    "        \n",
    "        \n",
    "      \n",
    "        \n",
    "        \n",
    "    def Life_style_Func(self):\n",
    "        \n",
    "        \n",
    "        FD_Threshold_1 = 6\n",
    "        FD_Threshold_2 = 4\n",
    "        FD_Threshold_3 = 2\n",
    "        \n",
    "\n",
    "\n",
    "        if self.ski == 'Yes':\n",
    "\n",
    "            # \n",
    "            Pj0_SK = 0.5 # good probability\n",
    "            Pl0_SK = 0.5 # bad probability\n",
    "\n",
    "            Pj1_SK = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_SK = 1.0\n",
    "\n",
    "\n",
    "            Jr_SK = -0.35 # good weight\n",
    "            Lr_SK = 0.55 # bad weight\n",
    "\n",
    "            RE_SK = (Jr_SK * Pj0_SK) + (Lr_SK * Pl0_SK)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        else:\n",
    "            # Advanced\n",
    "            Pj0_SK = 0.85 # good probability\n",
    "            Pl0_SK = 0.15 # bad probability\n",
    "\n",
    "            Pj1_SK = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_SK = 1.0\n",
    "\n",
    "\n",
    "            Jr_SK = -0.35 # good weight\n",
    "            Lr_SK = 0.55 # bad weight\n",
    "\n",
    "            RE_SK = (Jr_SK * Pj0_SK) + (Lr_SK * Pl0_SK)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        if self.gym == 'Yes':\n",
    "\n",
    "            # \n",
    "            Pj0_GY = 0.85 # good probability\n",
    "            Pl0_GY = 0.15 # bad probability \n",
    "\n",
    "            Pj1_GY = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_GY = 1.0\n",
    "\n",
    "\n",
    "            Jr_GY = -0.35 # good weight\n",
    "            Lr_GY = 0.55 # bad weight\n",
    "\n",
    "            RE_GY = (Jr_GY * Pj0_GY) + (Lr_GY * Pl0_GY)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        else:\n",
    "            # \n",
    "            Pj0_GY = 0.15 # good probability\n",
    "            Pl0_GY = 0.85 # bad probability\n",
    "\n",
    "            Pj1_GY = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_GY = 1.0\n",
    "\n",
    "\n",
    "            Jr_GY = -0.35 # good weight\n",
    "            Lr_GY = 0.55 # bad weight\n",
    "\n",
    "            RE_GY = (Jr_GY * Pj0_GY) + (Lr_GY * Pl0_GY)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        if self.hiking == 'Yes':\n",
    "\n",
    "            # \n",
    "            Pj0_HI = 0.85 # good probability\n",
    "            Pl0_HI = 0.15 # bad probability \n",
    "\n",
    "            Pj1_HI = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_HI = 1.0\n",
    "\n",
    "\n",
    "            Jr_HI = -0.35 # good weight\n",
    "            Lr_HI = 0.55 # bad weight\n",
    "\n",
    "            RE_HI = (Jr_HI * Pj0_HI) + (Lr_HI * Pl0_HI)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        else:\n",
    "            # \n",
    "            Pj0_HI = 0.15 # good probability\n",
    "            Pl0_HI = 0.85 # bad probability\n",
    "\n",
    "            Pj1_HI = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_HI = 1.0\n",
    "\n",
    "\n",
    "            Jr_HI = -0.35 # good weight\n",
    "            Lr_HI = 0.55 # bad weight\n",
    "\n",
    "            RE_HI = (Jr_HI * Pj0_HI) + (Lr_HI * Pl0_HI)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        if self.family_dependency >= FD_Threshold_1:\n",
    "\n",
    "            # \n",
    "            Pj0_FD = 0.8 # good probability\n",
    "            Pl0_FD = 0.2 # bad probability\n",
    "\n",
    "            Pj1_FD = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_FD = 1.0\n",
    "\n",
    "\n",
    "            Jr_FD = -0.35 # good weight\n",
    "            Lr_FD = 0.55 # bad weight\n",
    "\n",
    "            RE_FD = (Jr_FD * Pj0_FD) + (Lr_FD * Pl0_FD)  # Risk expectattion for net income when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        elif self.family_dependency > FD_Threshold_2 and family_dependency < FD_Threshold_1:\n",
    "            # \n",
    "            Pj0_FD = 0.75 # good probability \n",
    "            Pl0_FD = 0.25 # bad probability\n",
    "\n",
    "            Pj1_FD = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_FD = 1.0\n",
    "\n",
    "\n",
    "            Jr_FD = -0.35 # good weight\n",
    "            Lr_FD = 0.55 # bad weight\n",
    "\n",
    "            RE_FD = (Jr_FD * Pj0_FD) + (Lr_FD * Pl0_FD)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        else :\n",
    "            # \n",
    "            Pj0_FD = 0.65 # good probability\n",
    "            Pl0_FD = 0.35 # bad probability\n",
    "\n",
    "            Pj1_FD = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_FD = 1.0\n",
    "\n",
    "\n",
    "            Jr_FD = -0.35 # good weight\n",
    "            Lr_FD = 0.55 # bad weight\n",
    "\n",
    "            RE_FD = (Jr_FD * Pj0_FD) + (Lr_FD * Pl0_FD)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        # define a function for medical insurance\n",
    "\n",
    "\n",
    "        # define a function for extra pension\n",
    "\n",
    "        RE_LS = RE_SK + RE_GY + RE_HI + RE_FD\n",
    "\n",
    "\n",
    "\n",
    "        return RE_LS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.04999999999999988\n"
     ]
    }
   ],
   "source": [
    "# for both cases 1 and 2\n",
    "\n",
    "\n",
    "q1 = Life_style(Ski, Gym, Hiking, FD).Life_style_Func()\n",
    "print(q1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Age:\n",
    "    def __init__(self,age):\n",
    "        \n",
    "        \n",
    "        self.age = age\n",
    "        \n",
    "        age = AGE\n",
    "        \n",
    "       \n",
    "        \n",
    "        \n",
    "        \n",
    "    def Age_Func(self):\n",
    "        \n",
    "        \n",
    "        age_Threshold_1 = 50\n",
    "        age_Threshold_2 = 40\n",
    "        age_Threshold_3 = 30\n",
    "        age_Threshold_4 = 20\n",
    "        \n",
    "        \n",
    "\n",
    "\n",
    "        if self.age >= age_Threshold_1:\n",
    "\n",
    "            # \n",
    "            Pj0_AG = 0.8 # good probability\n",
    "            Pl0_AG = 0.2 # bad probability\n",
    "\n",
    "            Pj1_AG = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_AG = 1.0\n",
    "\n",
    "\n",
    "            Jr_AG = -0.35 # good weight\n",
    "            Lr_AG = 0.55 # bad weight\n",
    "\n",
    "            RE_AG = (Jr_AG * Pj0_AG) + (Lr_AG * Pl0_AG)  # Risk expectattion for net income when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        elif self.age > age_Threshold_2 and self.age < age_Threshold_1:\n",
    "            # \n",
    "            Pj0_AG = 0.75 # good probability\n",
    "            Pl0_AG = 0.25 # bad probability\n",
    "\n",
    "            Pj1_AG = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_AG = 1.0\n",
    "\n",
    "\n",
    "            Jr_AG = -0.35 # good weight\n",
    "            Lr_AG = 0.55 # bad weight \n",
    "\n",
    "            RE_AG = (Jr_AG * Pj0_AG) + (Lr_AG * Pl0_AG)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        elif self.age > age_Threshold_3 and self.age < age_Threshold_2 :\n",
    "            # \n",
    "            Pj0_AG = 0.65 # good probability \n",
    "            Pl0_AG = 0.35 # bad probability\n",
    "\n",
    "            Pj1_AG = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_AG = 1.0\n",
    "\n",
    "\n",
    "            Jr_AG = -0.35 # good weight\n",
    "            Lr_AG = 0.55 # bad weight\n",
    "\n",
    "            RE_AG = (Jr_AG * Pj0_AG) + (Lr_AG * Pl0_AG)  # Risk expectattion when the client has a job.\n",
    "\n",
    "        elif self.age > age_Threshold_4 and self.age < age_Threshold_3 :\n",
    "        # \n",
    "            Pj0_AG = 0.65 # good probability\n",
    "            Pl0_AG = 0.35 # bad probability\n",
    "\n",
    "            Pj1_AG = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_AG = 1.0\n",
    "\n",
    "\n",
    "            Jr_AG = -0.35 # good weight \n",
    "            Lr_AG = 0.55 # bad weight\n",
    "\n",
    "            RE_AG = (Jr_AG * Pj0_AG) + (Lr_AG * Pl0_AG)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "        else :\n",
    "            # \n",
    "            Pj0_AG = 0.55 # good probability \n",
    "            Pl0_AG = 0.45 # bad probability\n",
    "\n",
    "            Pj1_AG = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_AG = 1.0\n",
    "\n",
    "\n",
    "            Jr_AG = -0.35 # good weight\n",
    "            Lr_AG = 0.55 # bad weight\n",
    "\n",
    "            RE_AG = (Jr_AG * Pj0_AG) + (Lr_AG * Pl0_AG)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        return RE_AG\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.05500000000000002\n"
     ]
    }
   ],
   "source": [
    "# for both cases 1 and 2\n",
    "\n",
    "r1 = Age(AGE).Age_Func()\n",
    "print(r1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Health_condition:\n",
    "    def __init__ (self, familyH_condition, Health_condition, job_risk_level):\n",
    "        \n",
    "        self.familyH_condition = familyH_condition\n",
    "        \n",
    "        self.Health_condition = Health_condition\n",
    "        \n",
    "        self.job_risk_level = job_risk_level\n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "    def Health_condition_Func(self):\n",
    "        \n",
    "        \n",
    "        familyH_condition = FHC\n",
    "        Health_condition = HC\n",
    "        job_risk_level = JRL\n",
    "        \n",
    "        chronic_conditions = ['Stroke', 'Cancer', 'High blood pressure', 'Low blood pressure']\n",
    "        Health_problems = ['Stroke', 'Cancer', 'High blood pressure', 'Low blood pressure', 'minor surgery', 'major surgery']\n",
    "        \n",
    "        \n",
    "        \n",
    "\n",
    "\n",
    "        for c in chronic_conditions:\n",
    "\n",
    "            if self.familyH_condition == c:\n",
    "\n",
    "                # \n",
    "                Pj0_CI = 0.15 # good probability \n",
    "                Pl0_CI = 0.85 # bad probability \n",
    "\n",
    "               \n",
    "\n",
    "                Jr_CI = -0.35 # good weight\n",
    "                Lr_CI = 0.55 # bad weight\n",
    "\n",
    "                RE_CI = (Jr_CI * Pj0_CI) + (Lr_CI * Pl0_CI)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "            else:\n",
    "                # \n",
    "                Pj0_CI = 0.45 # good probability\n",
    "                Pl0_CI = 0.55 # bad probability\n",
    "\n",
    "               \n",
    "\n",
    "                Jr_CI = -0.35 # good weight\n",
    "                Lr_CI = 0.55 # bad weight\n",
    "\n",
    "                RE_CI = (Jr_CI * Pj0_CI) + (Lr_CI * Pl0_CI)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "        for h in Health_problems:\n",
    "\n",
    "            if self.Health_condition == h:\n",
    "\n",
    "                # \n",
    "                Pj0_HP = 0.15 # good probability \n",
    "                Pl0_HP = 0.85 # bad probability\n",
    "\n",
    "                \n",
    "\n",
    "                Jr_HP = -0.35 # good weight\n",
    "                Lr_HP = 0.55 # bad weight \n",
    "\n",
    "                RE_HP = (Jr_HP * Pj0_HP) + (Lr_HP * Pl0_HP)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "            else:\n",
    "                # \n",
    "                Pj0_HP = 0.45 # good probability\n",
    "                Pl0_HP = 0.55 # bad probability \n",
    "\n",
    "                Pj1_HP = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "                Pl1_HP = 1.0\n",
    "\n",
    "\n",
    "                Jr_HP = -0.35 # good weight\n",
    "                Lr_HP = 0.55 # bad weight \n",
    "\n",
    "                RE_HP = (Jr_HP * Pj0_HP) + (Lr_HP * Pl0_HP)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "            if self.job_risk_level == 'High':\n",
    "\n",
    "                # Beginner\n",
    "                Pj0_RL = 0.5 # good probability \n",
    "                Pl0_RL = 0.5 # bad probability\n",
    "\n",
    "                \n",
    "\n",
    "                Jr_RL = -0.35 # good weight\n",
    "                Lr_RL = 0.55 # bad weight\n",
    "\n",
    "                RE_RL = (Jr_RL * Pj0_RL) + (Lr_RL * Pl0_RL)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "            elif self.job_risk_level == 'Medium':\n",
    "                # Intermediate\n",
    "                Pj0_RL = 0.65 # good probability \n",
    "                Pl0_RL = 0.35 # bad probability \n",
    "\n",
    "                Pj1_RL = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "                Pl1_RL = 1.0\n",
    "\n",
    "\n",
    "                Jr_RL = -0.35 # good weight\n",
    "                Lr_RL = 0.55 # bad weight \n",
    "\n",
    "                RE_RL = (Jr_RL * Pj0_RL) + (Lr_RL * Pl0_RL)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "            else:\n",
    "                # Advanced\n",
    "                Pj0_RL = 0.85 # good probability \n",
    "                Pl0_RL = 0.15 # bad probability \n",
    "\n",
    "                Pj1_RL = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "                Pl1_RL = 1.0\n",
    "\n",
    "\n",
    "                Jr_RL = -0.35 # good weight\n",
    "                Lr_RL = 0.55 # bad weight \n",
    "\n",
    "                RE_RL = (Jr_RL * Pj0_RL) + (Lr_RL * Pl0_RL)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "            RE_HC = RE_CI + RE_HP + RE_RL\n",
    "\n",
    "            return RE_HC\n",
    "\n",
    "\n",
    "\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.07500000000000012\n"
     ]
    }
   ],
   "source": [
    "# for both cases 1 and 2\n",
    "\n",
    "s1 = Health_condition(Ski, Gym, Hiking).Health_condition_Func()\n",
    "print(s1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Location1:\n",
    "    \n",
    "    \n",
    "    def __init__(self, tax_location, gross_income):\n",
    "        \n",
    "        self.tax_location = tax_location\n",
    "        \n",
    "        self.gross_income = gross_income\n",
    "        \n",
    "        \n",
    "        \n",
    "        tax_location = Tax_Loc\n",
    "        gross_income = GI\n",
    "        \n",
    "    def Location_Func(self):\n",
    "\n",
    "                ### some useful information about swiss tax rates and social insurance. Note: these values are dummy values\n",
    "\n",
    "        social_insurance = 100. # this is just a dummy value\n",
    "\n",
    "        Federal_tax_rate = 0.06\n",
    "        mandatory_pension = 1000\n",
    "        \n",
    "        \n",
    "        cantons = ['Zurich', 'Bern', 'Luzern', 'Uri', 'Schwyz', 'Obwalden', 'Nidwalden', 'Glarus', 'Zug', 'Friburg', 'Solothurn', 'Basel_Stadt', 'Basel_Landschaft',\n",
    "                          'Schaffhausen', 'Appenzell_Ausserhoden', 'Appenzell_Innerhoden', 'St_Gallen', 'Graubunden', 'Aargau', 'Thurgau', 'Ticino', 'Vaud', 'Valais', 'Neuchatel', 'Geneva', 'Jura']\n",
    "\n",
    "\n",
    "\n",
    "        Cantonal_Tax_rate =[0.1267, 0.1974, 0.1372, 0.1596, 0.1310, 0.1495, 0.1226, 0.14, 0.0773, 0.1686, 0.1650, 0.2422, 0.1406,\n",
    "                            0.1403, 0.1496, 0.1184, 0.1554, 0.1343, 0.1373, 0.1373, 0.1541, 0.1869, 0.1386, 0.1967, 0.1596, 0.1822]\n",
    "        \n",
    "\n",
    "\n",
    "        Threshold_net_income_1 = 90000\n",
    "        Threshold_net_income_2 = 60000\n",
    "        Threshold_net_income_3 = 30000\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        for c in cantons:\n",
    "            if self.tax_location == c:\n",
    "\n",
    "                ctax_rate = Cantonal_Tax_rate[cantons.index(c)]\n",
    "\n",
    "                Net_income = ((1-(Federal_tax_rate + ctax_rate)) * self.gross_income) - (social_insurance + mandatory_pension)\n",
    "                \n",
    "                print(self.tax_location)\n",
    "                print(c)\n",
    "                \n",
    "                break\n",
    "\n",
    "\n",
    "            else:\n",
    "                print ('Tax location of the client is not defined')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        if Net_income >= Threshold_net_income_1:\n",
    "\n",
    "            # \n",
    "            Pj0_NI = 0.8 # good probability\n",
    "            Pl0_NI = 0.2 # bad probability\n",
    "\n",
    "            Pj1_NI = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_NI = 1.0\n",
    "\n",
    "\n",
    "            Jr_NI = -0.35 # good weight\n",
    "            Lr_NI = 0.55 # bad weight\n",
    "\n",
    "            RE_NI = (Jr_NI * Pj0_NI) + (Lr_NI * Pl0_NI)  # Risk expectattion for net income when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        elif Net_income > Threshold_net_income_2 and Net_income < Threshold_net_income_1:\n",
    "            # \n",
    "            Pj0_NI = 0.75 # good probability\n",
    "            Pl0_NI = 0.25 # bad probability\n",
    "\n",
    "            Pj1_NI = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_NI = 1.0\n",
    "\n",
    "\n",
    "            Jr_NI = -0.35 # good weight\n",
    "            Lr_NI = 0.55 # bad weight\n",
    "\n",
    "            RE_NI = (Jr_NI * Pj0_NI) + (Lr_NI * Pl0_NI)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        elif Net_income > Threshold_net_income_3 and Net_income < Threshold_net_income_2 :\n",
    "            # \n",
    "            Pj0_NI = 0.65 # good probability\n",
    "            Pl0_NI = 0.35 # bad probability\n",
    "\n",
    "            Pj1_NI = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_NI = 1.0\n",
    "\n",
    "\n",
    "            Jr_NI = -0.35 # good weight\n",
    "            Lr_Ni = 0.55 # bad weight\n",
    "\n",
    "            RE_NI = (Jr_NI * Pj0_NI) + (Lr_NI * Pl0_NI)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        else :\n",
    "            # \n",
    "            Pj0_NI = 0.55 # good probability\n",
    "            Pl0_NI = 0.45 # bad probability\n",
    "\n",
    "            Pj1_NI = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_NI = 1.0\n",
    "\n",
    "\n",
    "            Jr_NI = -0.35 # good weight\n",
    "            Lr_NI = 0.55 # bad weight\n",
    "\n",
    "            RE_NI = (Jr_NI * Pj0_NI) + (Lr_NI * Pl0_NI)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "        return [RE_NI, Net_income]\n",
    "\n",
    "\n",
    "\n",
    "                \n",
    "        \n",
    "\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Location2:\n",
    "    \n",
    "    \n",
    "    def __init__(self, tax_location, gross_income):\n",
    "        \n",
    "        self.tax_location = tax_location\n",
    "        \n",
    "        self.gross_income = gross_income\n",
    "        \n",
    "        \n",
    "        \n",
    "        tax_location = Tax_Loc\n",
    "        gross_income = GI\n",
    "        \n",
    "    def Location_Func(self):\n",
    "\n",
    "                ### some useful information about swiss tax rates and social insurance. Note: these values are dummy values\n",
    "\n",
    "        social_insurance = 100. # this is just a dummy value\n",
    "\n",
    "        Federal_tax_rate = 0.00\n",
    "        mandatory_pension = 1000\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        cantons = ['Zurich', 'Bern', 'Luzern', 'Uri', 'Schwyz', 'Obwalden', 'Nidwalden', 'Glarus', 'Zug', 'Friburg', 'Solothurn', 'Basel_Stadt', 'Basel_Landschaft',\n",
    "                          'Schaffhausen', 'Appenzell_Ausserhoden', 'Appenzell_Innerhoden', 'St_Gallen', 'Graubunden', 'Aargau', 'Thurgau', 'Ticino', 'Vaud', 'Valais', 'Neuchatel', 'Geneva', 'Jura']\n",
    "\n",
    "\n",
    "\n",
    "        Cantonal_Tax_rate =[0.1267, 0.1974, 0.1372, 0.1596, 0.1310, 0.1495, 0.1226, 0.14, 0.0773, 0.1686, 0.1650, 0.2422, 0.1406,\n",
    "                            0.1403, 0.1496, 0.1184, 0.1554, 0.1343, 0.1373, 0.1373, 0.1541, 0.1869, 0.1386, 0.1967, 0.1596, 0.1822]\n",
    "\n",
    "        Threshold_net_income_1 = 90000\n",
    "        Threshold_net_income_2 = 60000\n",
    "        Threshold_net_income_3 = 30000\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        for c in cantons:\n",
    "            if self.tax_location == c:\n",
    "\n",
    "                ctax_rate = Cantonal_Tax_rate[cantons.index(c)]\n",
    "\n",
    "                Net_income = ((1-(Federal_tax_rate + ctax_rate)) * self.gross_income) - (social_insurance + mandatory_pension)\n",
    "                \n",
    "                print(self.tax_location)\n",
    "                print(c)\n",
    "                \n",
    "                break\n",
    "\n",
    "\n",
    "            else:\n",
    "                print ('Tax location of the client is not defined')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        if Net_income >= Threshold_net_income_1:\n",
    "\n",
    "            # \n",
    "            Pj0_NI = 0.8 # good probability\n",
    "            Pl0_NI = 0.2 # bad probability\n",
    "\n",
    "            Pj1_NI = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_NI = 1.0\n",
    "\n",
    "\n",
    "            Jr_NI = -0.35 # good weight\n",
    "            Lr_NI = 0.55 # bad weight\n",
    "\n",
    "            RE_NI = (Jr_NI * Pj1_NI) + (Lr_NI * Pl1_NI)  # Risk expectattion for net income when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        elif Net_income > Threshold_net_income_2 and Net_income < Threshold_net_income_1:\n",
    "            # \n",
    "            Pj0_NI = 0.75 # good probability\n",
    "            Pl0_NI = 0.25 # bad probability\n",
    "\n",
    "            Pj1_NI = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_NI = 1.0\n",
    "\n",
    "\n",
    "            Jr_NI = -0.35 # good weight\n",
    "            Lr_NI = 0.55 # bad weight\n",
    "\n",
    "            RE_NI = (Jr_NI * Pj1_NI) + (Lr_NI * Pl1_NI)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        elif Net_income > Threshold_net_income_3 and Net_income < Threshold_net_income_2 :\n",
    "            # \n",
    "            Pj0_NI = 0.65 # good probability\n",
    "            Pl0_NI = 0.35 # bad probability\n",
    "\n",
    "            Pj1_NI = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_NI = 1.0\n",
    "\n",
    "\n",
    "            Jr_NI = -0.35 # good weight\n",
    "            Lr_NI = 0.55 # bad weight\n",
    "\n",
    "            RE_NI = (Jr_NI * Pj1_NI) + (Lr_NI * Pl1_NI)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "        else :\n",
    "            # \n",
    "            Pj0_NI = 0.55 # good probability\n",
    "            Pl0_NI = 0.45 # bad probability\n",
    "\n",
    "            Pj1_NI = 0.00 # this would be used to evaluate cases where the client loses a job\n",
    "            Pl1_NI = 1.0\n",
    "\n",
    "\n",
    "            Jr_NI = -0.35 # good weight\n",
    "            Lr_NI = 0.55 # bad weight\n",
    "\n",
    "            RE_NI = (Jr_NI * Pj1_NI) + (Lr_NI * Pl1_NI)  # Risk expectattion when the client has a job.\n",
    "\n",
    "\n",
    "\n",
    "        return [RE_NI, Net_income]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "Annual_Unemployment_benefit = 0.5 * GI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tax location of the client is not defined\n",
      "Bern\n",
      "Bern\n",
      "[-0.16999999999999996, 95438.0]\n"
     ]
    }
   ],
   "source": [
    "t1 = Location1(Tax_Loc, GI).Location_Func()\n",
    "print(t1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.7799999999999996"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for case 1\n",
    "\n",
    "cum_risk1 = p1 + q1 + r1 + s1 + t1[0]     # computing the aggregated cummulative risk\n",
    "cum_risk1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "95438.0"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Net_Income1 = t1[1]\n",
    "Net_Income1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tax location of the client is not defined\n",
      "Bern\n",
      "Bern\n",
      "[0.55, 51069.0]\n"
     ]
    }
   ],
   "source": [
    "t2 = Location2(Tax_Loc, Annual_Unemployment_benefit).Location_Func()\n",
    "print(t2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "51069.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Net_Income2 = t2[1]\n",
    "Net_Income2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.2800000000000002"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for case 1\n",
    "\n",
    "cum_risk2 = p2 + q1 + r1 + s1 + t2[0]     # computing the aggregated cummulative risk\n",
    "cum_risk2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "risk_threshold_1 = 5\n",
    "risk_threshold_2 = 4\n",
    "risk_threshold_3 = 3\n",
    "risk_threshold_4 = 2\n",
    "risk_threshold_5 = 1\n",
    "risk_threshold_6 = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "risk_threshold_7 = -1\n",
    "risk_threshold_8 = -2\n",
    "risk_threshold_9 = -3\n",
    "risk_threshold_10 = -4\n",
    "risk_threshold_11 = -5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "Annual_growth_rate = 0.004  # dummy growth rate\n",
    "interest_rate = 0.001\n",
    "compounding_years = 10\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def nth_root(num,root):\n",
    "    answer = num ** (1/root)\n",
    "    \n",
    "    return answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "def myplot1(Annual_discount_rate):\n",
    "    \n",
    "    years_passed = [*range(AGE,RT_age+1,1)]\n",
    "    \n",
    "    \n",
    "    \n",
    "    Net_income_after_years_passed1 = []\n",
    "    \n",
    "    Net_income_after_years_passed2 = []\n",
    "    \n",
    "    \n",
    "   \n",
    "    \n",
    "   # #Annual_discount_rate = 0.001  # dummy discount rate\n",
    "    \n",
    "    for y in years_passed:\n",
    "        \n",
    "        \n",
    "            \n",
    "        #Annual_growth_rate = 0.004\n",
    "\n",
    "        delta1 = Annual_growth_rate - Annual_discount_rate\n",
    "        #global delta\n",
    "\n",
    "        smooth_factor1 = nth_root(y+1-AGE,10)\n",
    "        smooth_factor2 = nth_root(y+1-AGE,4)\n",
    "        smooth_factor3 = nth_root(y+1-AGE,10)\n",
    "\n",
    "\n",
    "\n",
    "        Net_income_computed1 = Net_Income1 + ((delta1+smooth_factor1/100) * Net_Income1) #**smooth_factor2    # * (1 + (interest_rate/compounding_years))**(1/(10*y))  # this is a dummy equation\n",
    "        Net_income_after_years_passed1.append(Net_income_computed1)\n",
    "    #print(Net_income_after_years_passed)\n",
    "    \n",
    "        Net_income_computed2 = Net_Income2 + ((delta1+smooth_factor1/100) * Net_Income2) #**smooth_factor3     # * (1 + (interest_rate/compounding_years))**(1/(10*y))  # this is a dummy equation\n",
    "        Net_income_after_years_passed2.append(Net_income_computed2)\n",
    "    \n",
    "    \n",
    "    plt.subplot(3, 1, 1)\n",
    "    \n",
    "    plt.plot(years_passed, Net_income_after_years_passed1, 'r')\n",
    "    #plt.plot(years_passed, Net_income_after_years_passed2, 'g')\n",
    "    \n",
    "    \n",
    "    plt.title(\"best case scenario\")\n",
    "    plt.xlabel(\"Years Passed\")\n",
    "    plt.ylabel(\"Net disposable income\")\n",
    "    \n",
    "    plt.grid()\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    plt.subplot(3, 1, 3)\n",
    "    \n",
    "    plt.plot(years_passed, Net_income_after_years_passed2, 'g')\n",
    "    \n",
    "    plt.title(\"worst case scenario\")\n",
    "    plt.xlabel(\"Years Passed\")\n",
    "    plt.ylabel(\"Net disposable income\")\n",
    "    \n",
    "    plt.grid()\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    plt.show()\n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "    # we will use subplots to show different life insurance outcomes as well.\n",
    "        \n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def myplot2(Annual_discount_rate):\n",
    "    \n",
    "    years_passed = [*range(AGE,RT_age+1,1)]\n",
    "    \n",
    "    \n",
    "    \n",
    "    Net_income_after_years_passed1 = []\n",
    "    \n",
    "    Net_income_after_years_passed2 = []\n",
    "    \n",
    "    \n",
    "   \n",
    "    \n",
    "   # #Annual_discount_rate = 0.001  # dummy discount rate\n",
    "    years_after_jobloss = RT_age-YJL\n",
    "    \n",
    "    for y in years_passed:\n",
    "        \n",
    "        delta2 = Annual_growth_rate - Annual_discount_rate\n",
    "        smooth_factor1 = nth_root(y+1-AGE,20)\n",
    "        smooth_factor2 = nth_root(y+1-AGE,4)\n",
    "\n",
    "        \n",
    "        if years_after_jobloss <= y:\n",
    "            \n",
    "        \n",
    "        \n",
    "\n",
    "            #Annual_growth_rate = 0.004\n",
    "\n",
    "            #delta2 = Annual_growth_rate - Annual_discount_rate\n",
    "            #global delta\n",
    "\n",
    "            #smooth_factor1 = nth_root(y,20)\n",
    "            #smooth_factor2 = nth_root(y,4)\n",
    "\n",
    "\n",
    "\n",
    "            Net_income_computed1 = Net_Income1 + ((delta2+smooth_factor1/100) * Net_Income1)#**smooth_factor2     # * (1 + (interest_rate/compounding_years))**(1/(10*y))  # this is a dummy equation\n",
    "            Net_income_after_years_passed1.append(Net_income_computed1)\n",
    "        #print(Net_income_after_years_passed)\n",
    "        \n",
    "        else:\n",
    "\n",
    "            Net_income_computed2 = Net_Income2 + ((delta2+smooth_factor1/100) * Net_Income2)#**smooth_factor2     # * (1 + (interest_rate/compounding_years))**(1/(10*y))  # this is a dummy equation\n",
    "            Net_income_after_years_passed2.append(Net_income_computed2)\n",
    "            \n",
    "            \n",
    "    Net_income_after_years_passed =  Net_income_after_years_passed1 +  Net_income_after_years_passed2\n",
    "\n",
    "\n",
    "    #plt.subplot(2, 1, 1)\n",
    "\n",
    "    plt.plot(years_passed, Net_income_after_years_passed, 'b')\n",
    "    #plt.plot(years_passed, Net_income_after_years_passed2, 'g')\n",
    "\n",
    "\n",
    "    plt.title(\"Effect of Job loss simulation\")\n",
    "    plt.xlabel(\"Years Passed\")\n",
    "    plt.ylabel(\"Net disposable income\")\n",
    "\n",
    "    plt.grid()\n",
    "\n",
    "    \n",
    "    plt.show()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        # we will use subplots to show different life insurance outcomes as well.\n",
    "\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "def myplot3(Annual_discount_rate):\n",
    "    \n",
    "    years_passed = [*range(AGE,RT_age+1,1)]\n",
    "    \n",
    "    \n",
    "    # for policy 1\n",
    "    Net_income_after_years_passed1_1 = []\n",
    "    \n",
    "    Net_income_after_years_passed2_1 = []\n",
    "    \n",
    "    \n",
    "    # for policy 2\n",
    "    Net_income_after_years_passed1_2 = []\n",
    "    \n",
    "    Net_income_after_years_passed2_2 = []\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    Net_income_after_years_passed1 = []\n",
    "    \n",
    "    Net_income_after_years_passed2 = []\n",
    "    \n",
    "    \n",
    "   \n",
    "    \n",
    "   # #Annual_discount_rate = 0.001  # dummy discount rate\n",
    "    years_after_jobloss = RT_age-YJL\n",
    "    \n",
    "    #Insurance_principal = 10000\n",
    "    \n",
    "    #Insurance_monthly_payment = 1000\n",
    "    \n",
    "    #Insurance_payback_rate = 0.4\n",
    "    \n",
    "    Net_Income1 = t1[1]\n",
    "    \n",
    "    \n",
    "    # for policy 1\n",
    "    Net_Income1_1 = t1[1] - Insurance_principal_1\n",
    "    Net_Income2_1 = t2[1]\n",
    "    \n",
    "    \n",
    "    # for policy 2\n",
    "    \n",
    "    Net_Income1_2 = t1[1] - Insurance_principal_2\n",
    "    Net_Income2_2 = t2[1]\n",
    "    \n",
    "    \n",
    "    for y in years_passed:\n",
    "        \n",
    "        delta2 = Annual_growth_rate - Annual_discount_rate\n",
    "        smooth_factor1 = nth_root(y+1-AGE,20)\n",
    "        smooth_factor2 = nth_root(y+1-AGE,4)\n",
    "        \n",
    "        smooth_factor3 = nth_root(y+1-AGE,2)\n",
    "        \n",
    "        \n",
    "\n",
    "        \n",
    "        if years_after_jobloss <= y:\n",
    "            \n",
    "        \n",
    "        \n",
    "\n",
    "            #Annual_growth_rate = 0.004\n",
    "\n",
    "            #delta2 = Annual_growth_rate - Annual_discount_rate\n",
    "            #global delta\n",
    "\n",
    "            #smooth_factor1 = nth_root(y,20)\n",
    "            #smooth_factor2 = nth_root(y,4)\n",
    "            \n",
    "            Net_income_computed1 = (Net_Income1)  + ((delta2+smooth_factor1/100) * Net_Income1)#**(smooth_factor2)   # * (1 + (interest_rate/compounding_years))**(1/(10*y))  # this is a dummy equation\n",
    "            Net_income_after_years_passed1.append(Net_income_computed1)\n",
    "\n",
    "\n",
    "\n",
    "            Net_income_computed1_1 = (Net_Income1_1-(Insurance_monthly_payment_1 * 12))  + ((delta2+smooth_factor1/100) * Net_Income1)#**(smooth_factor2) # * (1 + (interest_rate/compounding_years))**(1/(10*y))  # this is a dummy equation\n",
    "            Net_income_after_years_passed1_1.append(Net_income_computed1_1)\n",
    "        #print(Net_income_after_years_passed)\n",
    "        \n",
    "            Net_income_computed1_2 = (Net_Income1_2-(Insurance_monthly_payment_2 * 12))  + ((delta2+smooth_factor1/100) * Net_Income1)#**(smooth_factor2) # * (1 + (interest_rate/compounding_years))**(1/(10*y))  # this is a dummy equation\n",
    "            Net_income_after_years_passed1_2.append(Net_income_computed1_2)\n",
    "        \n",
    "            \n",
    "        \n",
    "        else:\n",
    "            \n",
    "            Net_income_computed2 = (Net_Income2) + ((delta2+smooth_factor1/100) * Net_Income2)#**(smooth_factor2) # * (1 + (interest_rate/compounding_years))**(1/(10*y))  # this is a dummy equation\n",
    "            Net_income_after_years_passed2.append(Net_income_computed2)\n",
    "            \n",
    "            \n",
    "\n",
    "            Net_income_computed2_1 = (Net_Income2_1 + (Insurance_payback_rate_1*0.5*Net_Income1)) + ((delta2+smooth_factor1/100) * (Net_Income2_1 + (Insurance_payback_rate_1*0.5*Net_Income1)))#**(smooth_factor2) # * (1 + (interest_rate/compounding_years))**(1/(10*y))  # this is a dummy equation\n",
    "            Net_income_after_years_passed2_1.append(Net_income_computed2_1)\n",
    "            \n",
    "            Net_income_computed2_2 = (Net_Income2_2 + (Insurance_payback_rate_1*0.8*Net_Income1)) + ((delta2+smooth_factor1/100) * (Net_Income2_2 + (Insurance_payback_rate_2*0.8*Net_Income1)))#**(smooth_factor2) # * (1 + (interest_rate/compounding_years))**(1/(10*y))  # this is a dummy equation\n",
    "            Net_income_after_years_passed2_2.append(Net_income_computed2_2)\n",
    "            \n",
    "            \n",
    "    Net_income_after_years_passed =  Net_income_after_years_passed1 +  Net_income_after_years_passed2\n",
    "    \n",
    "    # for policy 1\n",
    "    Net_income_after_years_passed_new1 =  Net_income_after_years_passed1_1 +  Net_income_after_years_passed2_1\n",
    "    \n",
    "    # for policy 2\n",
    "    Net_income_after_years_passed_new2 =  Net_income_after_years_passed1_2 +  Net_income_after_years_passed2_2\n",
    "    \n",
    "    \n",
    "    \n",
    "    # for policy 1\n",
    "    difference1 = []\n",
    "    \n",
    "    \n",
    "    zip_object = zip(Net_income_after_years_passed_new1, Net_income_after_years_passed)\n",
    "    \n",
    "    for Net_income_after_years_passed_new1_i, Net_income_after_years_passed_i in zip_object:\n",
    "        \n",
    "        difference1.append(Net_income_after_years_passed_new1_i - Net_income_after_years_passed_i)\n",
    "    \n",
    "    \n",
    "    \n",
    "    # for policy 2\n",
    "    difference2 = []\n",
    "    \n",
    "    \n",
    "    zip_object = zip(Net_income_after_years_passed_new2, Net_income_after_years_passed)\n",
    "    \n",
    "    for Net_income_after_years_passed_new2_i, Net_income_after_years_passed_i in zip_object:\n",
    "        \n",
    "        difference2.append(Net_income_after_years_passed_new2_i - Net_income_after_years_passed_i)\n",
    "        \n",
    "    \n",
    "    \n",
    "    #print(difference)\n",
    "\n",
    "\n",
    "    plt.subplot(3, 1, 1)\n",
    "    \n",
    "    \n",
    "    \n",
    "    plt.plot(years_passed, Net_income_after_years_passed, label = 'without IC')\n",
    "    plt.plot(years_passed, Net_income_after_years_passed_new1, label = 'with IC_P1')\n",
    "    plt.plot(years_passed, Net_income_after_years_passed_new2, label = 'with IC_P2')\n",
    "    \n",
    "    \n",
    "    \n",
    "    plt.title(\"Income projection\")\n",
    "    plt.xlabel(\"Years Passed\")\n",
    "    plt.ylabel(\"Net disposable income\")\n",
    "\n",
    "    plt.grid()\n",
    "    \n",
    "    plt.legend()\n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "    # plotting for the difference\n",
    "    plt.subplot(3, 1, 3)\n",
    "\n",
    "    plt.plot(years_passed, difference1, label = 'delta P1')\n",
    "    \n",
    "    plt.plot(years_passed, difference2, label = 'delta P2')\n",
    "    \n",
    "\n",
    "    plt.title(\"Amount gained from purchasing insurance\")\n",
    "    plt.xlabel(\"Years Passed\")\n",
    "    plt.ylabel(\"Extra Disposable income\")\n",
    "\n",
    "    plt.grid()\n",
    "    plt.legend()\n",
    "\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "     \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "if cum_risk1 >= risk_threshold_1:\n",
    "    \n",
    "    myplot1(0.001)\n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "elif cum_risk1 >= risk_threshold_2 and cum_risk1 < risk_threshold_1:\n",
    "    \n",
    "    myplot1(0.0015)\n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "elif cum_risk1 >= risk_threshold_3 and cum_risk1 < risk_threshold_2:\n",
    "    \n",
    "    myplot1(0.002)\n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "elif cum_risk1 >= risk_threshold_4 and cum_risk1 < risk_threshold_3:\n",
    "    \n",
    "    myplot1(0.0025)\n",
    "    \n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_5 and cum_risk1 < risk_threshold_4:\n",
    "    myplot1(0.0032)\n",
    "    \n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_6 and cum_risk1 < risk_threshold_5:\n",
    "    myplot1(0.0035)\n",
    "    \n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_7 and cum_risk1 < risk_threshold_6:\n",
    "    myplot1(0.004)\n",
    "    \n",
    "    \n",
    "elif cum_risk1 >= risk_threshold_8 and cum_risk1 < risk_threshold_7:\n",
    "    myplot1(0.0045)\n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_9 and cum_risk1 < risk_threshold_8:\n",
    "    myplot1(0.005)\n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_10 and cum_risk1 < risk_threshold_9:\n",
    "    myplot1(0.0055)\n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_11 and cum_risk1 < risk_threshold_10:\n",
    "    myplot1(0.006)\n",
    "    \n",
    "else:\n",
    "    myplot1(0.0065)\n",
    "    \n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "if cum_risk1 >= risk_threshold_1:\n",
    "    \n",
    "    myplot2(0.001)\n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "elif cum_risk1 >= risk_threshold_2 and cum_risk1 < risk_threshold_1:\n",
    "    \n",
    "    myplot2(0.0015)\n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "elif cum_risk1 >= risk_threshold_3 and cum_risk1 < risk_threshold_2:\n",
    "    \n",
    "    myplot2(0.002)\n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "elif cum_risk1 >= risk_threshold_4 and cum_risk1 < risk_threshold_3:\n",
    "    \n",
    "    myplot2(0.0025)\n",
    "    \n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_5 and cum_risk1 < risk_threshold_4:\n",
    "    myplot2(0.0032)\n",
    "    \n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_6 and cum_risk1 < risk_threshold_5:\n",
    "    myplot2(0.0035)\n",
    "    \n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_7 and cum_risk1 < risk_threshold_6:\n",
    "    myplot2(0.004)\n",
    "    \n",
    "    \n",
    "elif cum_risk1 >= risk_threshold_8 and cum_risk1 < risk_threshold_7:\n",
    "    myplot2(0.0045)\n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_9 and cum_risk1 < risk_threshold_8:\n",
    "    myplot2(0.005)\n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_10 and cum_risk1 < risk_threshold_9:\n",
    "    myplot2(0.0055)\n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_11 and cum_risk1 < risk_threshold_10:\n",
    "    myplot2(0.006)\n",
    "    \n",
    "else:\n",
    "    myplot2(0.0065)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "if cum_risk1 >= risk_threshold_1:\n",
    "    \n",
    "    myplot3(0.001)\n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "elif cum_risk1 >= risk_threshold_2 and cum_risk1 < risk_threshold_1:\n",
    "    \n",
    "    myplot3(0.0015)\n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "elif cum_risk1 >= risk_threshold_3 and cum_risk1 < risk_threshold_2:\n",
    "    \n",
    "    myplot3(0.002)\n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "elif cum_risk1 >= risk_threshold_4 and cum_risk1 < risk_threshold_3:\n",
    "    \n",
    "    myplot3(0.0025)\n",
    "    \n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_5 and cum_risk1 < risk_threshold_4:\n",
    "    myplot3(0.0032)\n",
    "    \n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_6 and cum_risk1 < risk_threshold_5:\n",
    "    myplot3(0.0035)\n",
    "    \n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_7 and cum_risk1 < risk_threshold_6:\n",
    "    myplot3(0.004)\n",
    "    \n",
    "    \n",
    "elif cum_risk1 >= risk_threshold_8 and cum_risk1 < risk_threshold_7:\n",
    "    myplot3(0.0045)\n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_9 and cum_risk1 < risk_threshold_8:\n",
    "    myplot3(0.005)\n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_10 and cum_risk1 < risk_threshold_9:\n",
    "    myplot3(0.0055)\n",
    "    \n",
    "\n",
    "elif cum_risk1 >= risk_threshold_11 and cum_risk1 < risk_threshold_10:\n",
    "    myplot3(0.006)\n",
    "    \n",
    "else:\n",
    "    myplot3(0.0065)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
